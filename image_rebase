#!/usr/bin/env python3

import argparse
import urllib
import urllib.parse
import urllib.request
import urllib.error
import json
import sys
import datetime
import hashlib
from collections import OrderedDict

DEBUGLEVEL = 0
DEFAULT_TIMEOUT = 5


def run():
    parser = argparse.ArgumentParser(
        description='docker_rebase allows you to change base image of your Docker image by '
                    'replacing layers', add_help=False)
    parser.add_argument('registry_url', help='url of docker registry')
    parser.add_argument('image', help='name:tag of source image')
    parser.add_argument('-f', '--force', dest='force', action='store_true',
                        help='Force overwriting existing target image')
    parser.add_argument('-B', '--from-base', dest='from_base',
                        help='Current base image name:tag. Used to autodetect num_layers')
    parser.add_argument('-b', '--to-base', dest='base_image', help='Target base image name:tag. By default it is '
                                                                'autodetected from source image.')
    parser.add_argument('-t', '--tag', dest='new_tag', help='Target tag for new image. By default is the same as of '
                                                            'the source.')
    parser.add_argument('-l', '--layers', type=int, dest='num_layers',
                        help='Number of layers of image to keep. By default it is '
                             'autodetected from image manifest or from_base.')
    args = parser.parse_args()

    if args.from_base and args.num_layers:
        raise RuntimeError('Specifying either from_base or num_layers')

    registry = DockerRegistry(args.registry_url)
    try:
        registry.image_rebase(args.image, args.new_tag, args.base_image, args.from_base, args.num_layers, args.force)
    except RuntimeError as err:
        sys.stderr.write('ERROR: ' + err.args[0])


class NoHttpErrorHandler(urllib.request.HTTPDefaultErrorHandler):
    """Do not throw HTTP exceptions, but convert them to status codes
    """

    def http_error_default(self, req, fp, code, msg, headers):
        result = urllib.error.HTTPError(req.get_full_url(), code, msg, headers, fp)
        result.status = code
        return result


class AllRedirectHandler(urllib.request.HTTPRedirectHandler):
    """Allows redirecting GET and POST for all of (301, 302, 303, 307) HTTP status codes
    """

    def redirect_request(self, req, fp, code, msg, headers, newurl):
        if code in (301, 302, 303, 307):
            newurl = newurl.replace(' ', '%20')
            newheaders = dict((k, v) for k, v in req.headers.items()
                              if k.lower() not in ("content-length", "content-type")
                              )
            return urllib.request.Request(newurl,
                                          data=req.get_data(),
                                          headers=newheaders,
                                          origin_req_host=req.get_origin_req_host())
        else:
            raise urllib.error.HTTPError(req.get_full_url(), code, msg, headers, fp)


class Connection(object):
    def __init__(self, baseurl, timeout=DEFAULT_TIMEOUT):
        self.baseurl = baseurl
        self.urlopener = urllib.request.build_opener(NoHttpErrorHandler(),
                                                     AllRedirectHandler(),
                                                     urllib.request.HTTPSHandler(DEBUGLEVEL))
        self.timeout = timeout

    def make_request(self, url, data=None, method=None, headers=None, expect=None):
        if DEBUGLEVEL > 1:
            print("Try to request https://{0}{1}".format(self.baseurl, url))

        if headers is None:
            headers = {}

        if url.startswith('https://') or url.startswith('http://'):
            target_url = url
        else:
            target_url = self.baseurl + url

        if data is not None:
            if 'Content-Type' not in headers:
                headers['Content-Type'] = 'application/octet-stream'
            headers['Content-length'] = len(data)

        request = urllib.request.Request(target_url, data, headers, method=method)

        resp = self.urlopener.open(request, timeout=self.timeout)
        content = resp.read()
        resp.close()

        if (not expect is None) and not resp.getcode() in expect:
            raise RuntimeError(
                'Unexpected response code %s to %s %s' % (resp.getcode(), request.get_method(), target_url))

        return resp, content


def is_non_empty_layer(history):
    return 'empty_layer' not in history or not history['empty_layer']


class DockerRegistry(object):
    def __init__(self, registry_url):
        if '://' not in registry_url: 
            registry_url = 'http://' + registry_url 
        self.connection = Connection(registry_url)

    def manifest_get(self, name, tag):
        resp, content = self.connection.make_request(
            '/v2/' + urllib.parse.quote_plus(name) + '/manifests/' + urllib.parse.quote_plus(tag),
            headers={'Accept': 'application/vnd.docker.distribution.manifest.v2+json'},
            expect=[200, 404]
        )

        if resp.getcode() == 404:
            raise RuntimeError('Image not found %s:%s' % (name, tag))

        return json.loads(content.decode('utf-8'))

    def manifest_upload(self, name, tag, manifest):
        manifest_url = '/v2/' + urllib.parse.quote_plus(name) + '/manifests/' + urllib.parse.quote_plus(tag)
        if DEBUGLEVEL > 0:
            sys.stderr.write("Uploading: %s\n" % (self.connection.baseurl + manifest_url))
        self.connection.make_request(
            manifest_url,
            method='PUT', data=manifest, expect=[201],
            headers={'Content-Type': 'application/vnd.docker.distribution.manifest.v2+json'}
        )

    def manifest_exists(self, name, tag):
        resp, content = self.connection.make_request(
            '/v2/' + urllib.parse.quote_plus(name) + '/manifests/' + urllib.parse.quote_plus(tag),
            method='HEAD',
            expect=[200, 404]
        )
        return resp.getcode() == 200

    def blob_get(self, name, digest):
        resp, content = self.connection.make_request(
            '/v2/' + urllib.parse.quote_plus(name) + '/blobs/' + urllib.parse.quote_plus(digest),
            expect=[200, 404]
        )
        if resp.getcode() == 404:
            raise RuntimeError('Blob not found %s:%s' % (name, digest))
        return json.loads(content.decode('utf-8'))

    def blob_upload(self, name, blob):
        d = hashlib.sha256()
        d.update(blob)
        digest = 'sha256:' + d.digest().hex()

        exists, length = self.blob_exists(name, digest)

        if exists:  # OK already exists
            sys.stdout.write("%s: Already exists, %s bytes\n" % (digest, length))
            return digest

        sys.stdout.write("%s: Uploading %d bytes\n" % (digest, len(blob)))

        # get upload link
        resp, content = self.connection.make_request(
            '/v2/' + urllib.parse.quote_plus(name) + '/blobs/uploads/',
            method='POST', expect=[202]
        )

        upload_location = resp.info()['location']
        resp, content = self.connection.make_request(
            upload_location + '&digest=' + digest,
            method='PUT', data=blob, expect=[201]
        )
        uploaded_digest = resp.info()['Docker-Content-Digest']

        if digest != uploaded_digest:
            raise IOError("Uploaded blob digest doesn't match")

        return digest

    def blob_mount(self, name, from_name, digest):
        exists, length = self.blob_exists(name, digest)

        if exists:  # OK already exists
            sys.stdout.write("%s: Already exists, %s bytes\n" % (digest, length))
            return digest

        sys.stdout.write("%s: Mounting from %s\n" % (digest, from_name))

        self.connection.make_request(
            '/v2/' + urllib.parse.quote_plus(name) + '/blobs/uploads/?from=' + urllib.parse.quote_plus(
                from_name) + '&mount=' + urllib.parse.quote_plus(digest),
            method='POST', expect=[201]
        )

    def blob_exists(self, name, digest):
        blob_url = '/v2/' + urllib.parse.quote_plus(name) + '/blobs/' + digest
        resp, content = self.connection.make_request(
            blob_url,
            method='HEAD', expect=[200, 404]
        )
        if resp.getcode() == 404:
            return False, 0
        length = resp.info()['Content-Length']
        registry_digest = resp.info()['Docker-Content-Digest']
        if digest != registry_digest:
            raise IOError("Blob digest doesn't match")
        return True, length

    def image_get(self, name, tag):
        sys.stdout.write("Loading manifest %s:%s\n" % (name, tag))
        image_man = self.manifest_get(name, tag)
        if DEBUGLEVEL > 0:
            sys.stderr.write("Manifest %s:%s:\n%s\n" % (name, tag, json.dumps(image_man, indent=4)))
        image_digest = image_man['config']['digest']

        sys.stdout.write("Loading configuration %s for %s:%s\n" % (image_digest, name, tag))
        image_blob = self.blob_get(name, image_digest)
        if DEBUGLEVEL > 0:
            sys.stderr.write("Configuration %s:%s:\n%s\n" % (name, tag, json.dumps(image_blob, indent=4)))

        return image_man, image_blob, image_digest

    def image_rebase(self, image, new_tag, base_image, old_base_image, num_layers, force):
        name, tag = parse_image_name(image)
        new_tag = new_tag or tag

        if DEBUGLEVEL > 0:
            sys.stderr.write("Registry: %s\n\n" % self.connection.baseurl)

        image_man, image_blob, image_digest = self.image_get(name, tag)
        
        if old_base_image is not None:
            if DEBUGLEVEL > 0:
                sys.stderr.write("Autodetecting num_layers from old base image %s\n" % old_base_image)
                
            old_base_name, old_base_tag = parse_image_name(old_base_image)
            old_base_man, old_base_blob, __ = self.image_get(old_base_name, old_base_tag)
            
            if not self.is_base_image(image_man, image_blob, old_base_man, old_base_blob):
                raise RuntimeError("%s is not a base image for %s" % (image, old_base_image))
            
            num_layers = len(image_blob['history']) - len(old_base_blob['history'])
            if DEBUGLEVEL > 0:
                sys.stderr.write("Container layers: %d\n" % num_layers)

        if base_image is None:
            if 'FROM' not in image_blob['config']['Labels']:
                raise RuntimeError("Cannot autodetect base image: label FROM must be set in %s\n" % (image))
            base_image = image_blob['config']['Labels']['FROM']
            sys.stdout.write("Autodetected base image name: %s\n" % base_image)
            
        if num_layers is None:
            if DEBUGLEVEL > 0:
                sys.stderr.write("Autodetecting num_layers and base_image by searching for 'LABEL FROM' in %s\n" % image)
            num_layers = next(index for (index, history) in enumerate(reversed(image_blob['history'])) if history['created_by'].startswith('/bin/sh -c #(nop)  LABEL FROM='))
            if num_layers is None:
                raise RuntimeError("Cannot autodetect num_layers: label FROM must be set in %s\n" % (image))
            num_layers += 1
            if DEBUGLEVEL > 0:
                sys.stderr.write("Container layers: %d\n" % num_layers)

        base_name, base_tag = parse_image_name(base_image)
        base_man, base_blob, new_base_digest = self.image_get(base_name, base_tag)
        
        if tag == new_tag:
            if self.is_base_image(image_man, image_blob, base_man, base_blob):
                sys.stdout.write("%s is already based on %s. Nothing to do.\n" % (image, base_image))
                return
            
        elif self.manifest_exists(name, new_tag):
            target_image_man, target_image_blob, __ = self.image_get(name, new_tag)
            if not self.is_same_or_rebased_image(target_image_man, target_image_blob, image_man, image_blob, num_layers):
                if not force:
                    raise RuntimeError("Target image %s:%s exists and has different top layers. Use --force to overwrite. \n" % (name, new_tag))
                sys.stdout.write("Overwriting target image %s:%s having different top layers. \n" % (name, new_tag))
            elif self.is_base_image(target_image_man, target_image_blob, base_man, base_blob):
                sys.stdout.write("%s is already based on %s. Nothing to do.\n" % (image, base_image))
                return


        sys.stdout.write("\nRebasing %s:%s@%s to %s:%s@%s\n\n" % (
            name, tag, image_digest, base_name, base_tag, new_base_digest))

        base_blob['history'], top_history = merge_lists(image_blob['history'], num_layers, base_blob['history'],
                                                        'history')
        nonempty_layers = self.history_apply(base_blob, image_blob, top_history)

        base_blob['rootfs']['diff_ids'], _ = merge_lists(image_blob['rootfs']['diff_ids'],
                                                         nonempty_layers,
                                                         base_blob['rootfs']['diff_ids'], 'rootfs/diff_ids')
        cc = base_blob['container_config']
        base_blob['container_config'] = OrderedDict(base_blob['config'])
        base_blob['container_config']['Cmd'] = cc['Cmd']

        base_blob['config']['Image'] = new_base_digest
        base_blob['container_config']['Image'] = new_base_digest
        base_blob['created'] = datetime.datetime.now().isoformat() + 'Z'

        if DEBUGLEVEL > 0:
            sys.stderr.write("New container configuration:\n %s\n" % json.dumps(base_blob, indent=4))

        new_blob = json.dumps(base_blob).encode('utf-8')

        sys.stdout.write("Uploading new manifest:\n")

        # mount all layers from new base
        for layer in base_man['layers']:
            self.blob_mount(name, base_name, layer['digest'])

        new_digest = self.blob_upload(name, new_blob)

        base_man['layers'], _ = merge_lists(image_man['layers'], nonempty_layers, base_man['layers'], 'layers')
        base_man['config']['size'] = len(new_blob)
        base_man['config']['digest'] = new_digest

        if DEBUGLEVEL > 0:
            sys.stderr.write("New image manifest:\n %s\n" % json.dumps(base_man, indent=4))
        new_man = json.dumps(base_man).encode('utf-8')

        self.manifest_upload(name, new_tag, new_man)
        sys.stdout.write("Created %s:%s@%s\n" % (name, new_tag, new_digest))

    def history_apply(self, new_container, old_container, container_history):
        nonempty_layers = 0
        # copy all meta parameters and count non-empty layers
        for history in container_history:
            empty_layer = is_non_empty_layer(history)
            if empty_layer:
                nonempty_layers += 1
            elif history['created_by'].startswith('/bin/sh -c #(nop)'):
                cmd = history['created_by'][len('/bin/sh -c #(nop)'):].lstrip()
                if DEBUGLEVEL > 0:
                    sys.stderr.write("Applying %s" % cmd)

                cmd_name, cmd_rest = cmd.split(' ', 1)
                cmd_arg = cmd_rest.split('=', 1)[0]
                if cmd_name == 'CMD':
                    new_container['config']['Cmd'] = old_container['config']['Cmd']

                elif cmd_name == 'ENTRYPOINT':
                    new_container['config']['Entrypoint'] = old_container['config']['Entrypoint']

                elif cmd_name == 'USER':
                    new_container['config']['User'] = old_container['config']['User']

                elif cmd_name == 'WORKDIR':
                    new_container['config']['WorkingDir'] = old_container['config']['WorkingDir']

                elif cmd_name == 'LABEL':
                    val = old_container['config']['Labels'][cmd_arg]
                    if val is None:
                        raise RuntimeError('No %s Label found' % cmd_arg)
                    if 'Labels' not in new_container['config']:
                        new_container['config']['Labels'] = OrderedDict()
                    new_container['config']['Labels'][cmd_arg] = val

                elif cmd_name == 'ENV':
                    new_envs = old_container['config']['Env']
                    new_val = [x for x in new_envs if x.startswith(cmd_arg + '=')]
                    if len(new_val) == 0:
                        raise RuntimeError('No %s ENV found' % cmd_arg)
                    old_envs = new_container['config']['Env']
                    old_val = [x for x in old_envs if x.startswith(cmd_arg + '=')]
                    if len(old_val) == 0:
                        new_container['config']['Env'] = old_envs + new_val
                    else:
                        new_container['config']['Env'] = [new_val[0] if x.startswith(cmd_arg + '=') else x for x in
                                                          old_envs]

                elif cmd_name == 'EXPOSE':
                    if len(cmd_rest.split(' ')) > 1:
                        raise RuntimeError('Multi-arg EXPOSE statements are not supported: %s' % cmd)
                    port = cmd_arg if '/' in cmd_arg else cmd_arg + '/tcp'
                    val = old_container['config']['ExposedPorts'][port]
                    if val is None:
                        raise RuntimeError('No %s ExposedPorts found' % cmd_arg)
                    if 'ExposedPorts' not in new_container['config']:
                        new_container['config']['ExposedPorts'] = OrderedDict()
                    new_container['config']['ExposedPorts'][port] = val
                    
                else:
                    raise RuntimeError("Command not supported: %s" % cmd)
                
        return nonempty_layers

    def is_base_image(self, image_man, image_blob, base_man, base_blob):
        return self.is_base(image_man['layers'], base_man['layers']) \
               and self.is_base(image_blob['history'], base_blob['history']) 

    def is_base(self, image_list, base_list):
        return image_list[:len(base_list)] == base_list

    def is_same_or_rebased_image(self, man1, blob1, man2, blob2, num_layers):
        last_history = blob1['history'][-num_layers:]
        if last_history != blob2['history'][-num_layers:]:
            return False
        nonempty_layers = len([x for x in last_history if is_non_empty_layer(x)])
        return man1['layers'][-nonempty_layers:] == man2['layers'][-nonempty_layers:]


def parse_image_name(image):
    splits = image.split('@', 1)
    if len(splits) > 1:
        return splits[0], splits[1]
    splits = image.split(':', 1)
    return splits[0], (splits[1] if len(splits) > 1 else 'latest')


def merge_lists(list, num_elements, new_base, descr):
    if len(list) < num_elements:
        raise IOError("Base manifest check failed. %s has invalid length: %d < %d" % (descr, len(list), num_elements))

    top_list = list[len(list) - num_elements:]
    return new_base + top_list, top_list


run()
